mainmodule prefix {
  readonly CProxy_Main mainProxy;
  readonly int numElements;

  mainchare Main {
    entry Main(CkArgMsg* msg);
    entry void valuesDisplayed();
    entry [reductiontarget] void checkIn();
  };

  array [1D] Prefix {
    entry Prefix();
    entry void displayValue(char prefix[len], int len);
    entry void passValue(int step, unsigned int incomingValue);

    entry void startPrefixCalculation() {

      for(stepCount = 0; (1 << stepCount) < numElements; stepCount++) {
        atomic {
          istep = (1<<stepCount);
        }

        atomic "send_value" {
          targetIndex = thisIndex + istep;
          if (targetIndex < numElements) {
            thisProxy[targetIndex].passValue(stepCount, value);
          }
        }

        if (thisIndex >= istep) {
          when passValue[stepCount] (int step, unsigned int val) atomic {
            value += val;
          }
        }
      }

      atomic "done" {
        CkCallback cb(CkReductionTarget(Main, checkIn), mainProxy);
        contribute(cb);
      }
    };
  };
};
